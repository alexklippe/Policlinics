'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.42000
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="tgp2_site")>  _
Partial Public Class ContactsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Определения метода расширяемости"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDolgnost(instance As Dolgnost)
    End Sub
  Partial Private Sub UpdateDolgnost(instance As Dolgnost)
    End Sub
  Partial Private Sub DeleteDolgnost(instance As Dolgnost)
    End Sub
  Partial Private Sub InsertDolgnostCategor(instance As DolgnostCategor)
    End Sub
  Partial Private Sub UpdateDolgnostCategor(instance As DolgnostCategor)
    End Sub
  Partial Private Sub DeleteDolgnostCategor(instance As DolgnostCategor)
    End Sub
  Partial Private Sub InsertSotrudniki(instance As Sotrudniki)
    End Sub
  Partial Private Sub UpdateSotrudniki(instance As Sotrudniki)
    End Sub
  Partial Private Sub DeleteSotrudniki(instance As Sotrudniki)
    End Sub
  Partial Private Sub InsertNewsTable(instance As NewsTable)
    End Sub
  Partial Private Sub UpdateNewsTable(instance As NewsTable)
    End Sub
  Partial Private Sub DeleteNewsTable(instance As NewsTable)
    End Sub
  Partial Private Sub Insertfilials(instance As filials)
    End Sub
  Partial Private Sub Updatefilials(instance As filials)
    End Sub
  Partial Private Sub Deletefilials(instance As filials)
    End Sub
  Partial Private Sub InsertCabinet(instance As Cabinet)
    End Sub
  Partial Private Sub UpdateCabinet(instance As Cabinet)
    End Sub
  Partial Private Sub DeleteCabinet(instance As Cabinet)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("tgp2_siteConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Dolgnosts() As System.Data.Linq.Table(Of Dolgnost)
		Get
			Return Me.GetTable(Of Dolgnost)
		End Get
	End Property
	
	Public ReadOnly Property DolgnostCategors() As System.Data.Linq.Table(Of DolgnostCategor)
		Get
			Return Me.GetTable(Of DolgnostCategor)
		End Get
	End Property
	
	Public ReadOnly Property Sotrudnikis() As System.Data.Linq.Table(Of Sotrudniki)
		Get
			Return Me.GetTable(Of Sotrudniki)
		End Get
	End Property
	
	Public ReadOnly Property NewsTable() As System.Data.Linq.Table(Of NewsTable)
		Get
			Return Me.GetTable(Of NewsTable)
		End Get
	End Property
	
	Public ReadOnly Property filials() As System.Data.Linq.Table(Of filials)
		Get
			Return Me.GetTable(Of filials)
		End Get
	End Property
	
	Public ReadOnly Property Cabinets() As System.Data.Linq.Table(Of Cabinet)
		Get
			Return Me.GetTable(Of Cabinet)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Dolgnost")>  _
Partial Public Class Dolgnost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _DolgnostName As String
	
	Private _idDolgnostCategory As System.Nullable(Of Integer)
	
	Private _Sotrudnikis As EntitySet(Of Sotrudniki)
	
	Private _DolgnostCategor As EntityRef(Of DolgnostCategor)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnDolgnostNameChanging(value As String)
    End Sub
    Partial Private Sub OnDolgnostNameChanged()
    End Sub
    Partial Private Sub OnidDolgnostCategoryChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidDolgnostCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sotrudnikis = New EntitySet(Of Sotrudniki)(AddressOf Me.attach_Sotrudnikis, AddressOf Me.detach_Sotrudnikis)
		Me._DolgnostCategor = CType(Nothing, EntityRef(Of DolgnostCategor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DolgnostName", DbType:="NVarChar(50)")>  _
	Public Property DolgnostName() As String
		Get
			Return Me._DolgnostName
		End Get
		Set
			If (String.Equals(Me._DolgnostName, value) = false) Then
				Me.OnDolgnostNameChanging(value)
				Me.SendPropertyChanging
				Me._DolgnostName = value
				Me.SendPropertyChanged("DolgnostName")
				Me.OnDolgnostNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDolgnostCategory", DbType:="Int")>  _
	Public Property idDolgnostCategory() As System.Nullable(Of Integer)
		Get
			Return Me._idDolgnostCategory
		End Get
		Set
			If (Me._idDolgnostCategory.Equals(value) = false) Then
				If Me._DolgnostCategor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidDolgnostCategoryChanging(value)
				Me.SendPropertyChanging
				Me._idDolgnostCategory = value
				Me.SendPropertyChanged("idDolgnostCategory")
				Me.OnidDolgnostCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dolgnost_Sotrudniki", Storage:="_Sotrudnikis", ThisKey:="id", OtherKey:="idDolgnost")>  _
	Public Property Sotrudnikis() As EntitySet(Of Sotrudniki)
		Get
			Return Me._Sotrudnikis
		End Get
		Set
			Me._Sotrudnikis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DolgnostCategor_Dolgnost", Storage:="_DolgnostCategor", ThisKey:="idDolgnostCategory", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property DolgnostCategor() As DolgnostCategor
		Get
			Return Me._DolgnostCategor.Entity
		End Get
		Set
			Dim previousValue As DolgnostCategor = Me._DolgnostCategor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DolgnostCategor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DolgnostCategor.Entity = Nothing
					previousValue.Dolgnosts.Remove(Me)
				End If
				Me._DolgnostCategor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Dolgnosts.Add(Me)
					Me._idDolgnostCategory = value.id
				Else
					Me._idDolgnostCategory = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("DolgnostCategor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sotrudnikis(ByVal entity As Sotrudniki)
		Me.SendPropertyChanging
		entity.Dolgnost = Me
	End Sub
	
	Private Sub detach_Sotrudnikis(ByVal entity As Sotrudniki)
		Me.SendPropertyChanging
		entity.Dolgnost = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DolgnostCategor")>  _
Partial Public Class DolgnostCategor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _CategoryName As String
	
	Private _Dolgnosts As EntitySet(Of Dolgnost)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dolgnosts = New EntitySet(Of Dolgnost)(AddressOf Me.attach_Dolgnosts, AddressOf Me.detach_Dolgnosts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(50)")>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DolgnostCategor_Dolgnost", Storage:="_Dolgnosts", ThisKey:="id", OtherKey:="idDolgnostCategory")>  _
	Public Property Dolgnosts() As EntitySet(Of Dolgnost)
		Get
			Return Me._Dolgnosts
		End Get
		Set
			Me._Dolgnosts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Dolgnosts(ByVal entity As Dolgnost)
		Me.SendPropertyChanging
		entity.DolgnostCategor = Me
	End Sub
	
	Private Sub detach_Dolgnosts(ByVal entity As Dolgnost)
		Me.SendPropertyChanging
		entity.DolgnostCategor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sotrudniki")>  _
Partial Public Class Sotrudniki
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Surname As String
	
	Private _Name As String
	
	Private _MidName As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _IdCabinet As System.Nullable(Of Integer)
	
	Private _dateStartWork As System.Nullable(Of Date)
	
	Private _dateEndWork As System.Nullable(Of Date)
	
	Private _dateStartOtpusk As System.Nullable(Of Date)
	
	Private _dateEndOtpusk As System.Nullable(Of Date)
	
	Private _idDolgnost As System.Nullable(Of Integer)
	
	Private _Dolgnost As EntityRef(Of Dolgnost)
	
	Private _Cabinet As EntityRef(Of Cabinet)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMidNameChanging(value As String)
    End Sub
    Partial Private Sub OnMidNameChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnIdCabinetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCabinetChanged()
    End Sub
    Partial Private Sub OndateStartWorkChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateStartWorkChanged()
    End Sub
    Partial Private Sub OndateEndWorkChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateEndWorkChanged()
    End Sub
    Partial Private Sub OndateStartOtpuskChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateStartOtpuskChanged()
    End Sub
    Partial Private Sub OndateEndOtpuskChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateEndOtpuskChanged()
    End Sub
    Partial Private Sub OnidDolgnostChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidDolgnostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dolgnost = CType(Nothing, EntityRef(Of Dolgnost))
		Me._Cabinet = CType(Nothing, EntityRef(Of Cabinet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="NVarChar(50)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MidName", DbType:="NVarChar(50)")>  _
	Public Property MidName() As String
		Get
			Return Me._MidName
		End Get
		Set
			If (String.Equals(Me._MidName, value) = false) Then
				Me.OnMidNameChanging(value)
				Me.SendPropertyChanging
				Me._MidName = value
				Me.SendPropertyChanged("MidName")
				Me.OnMidNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCabinet", DbType:="Int")>  _
	Public Property IdCabinet() As System.Nullable(Of Integer)
		Get
			Return Me._IdCabinet
		End Get
		Set
			If (Me._IdCabinet.Equals(value) = false) Then
				If Me._Cabinet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCabinetChanging(value)
				Me.SendPropertyChanging
				Me._IdCabinet = value
				Me.SendPropertyChanged("IdCabinet")
				Me.OnIdCabinetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateStartWork", DbType:="Date")>  _
	Public Property dateStartWork() As System.Nullable(Of Date)
		Get
			Return Me._dateStartWork
		End Get
		Set
			If (Me._dateStartWork.Equals(value) = false) Then
				Me.OndateStartWorkChanging(value)
				Me.SendPropertyChanging
				Me._dateStartWork = value
				Me.SendPropertyChanged("dateStartWork")
				Me.OndateStartWorkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateEndWork", DbType:="Date")>  _
	Public Property dateEndWork() As System.Nullable(Of Date)
		Get
			Return Me._dateEndWork
		End Get
		Set
			If (Me._dateEndWork.Equals(value) = false) Then
				Me.OndateEndWorkChanging(value)
				Me.SendPropertyChanging
				Me._dateEndWork = value
				Me.SendPropertyChanged("dateEndWork")
				Me.OndateEndWorkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateStartOtpusk", DbType:="Date")>  _
	Public Property dateStartOtpusk() As System.Nullable(Of Date)
		Get
			Return Me._dateStartOtpusk
		End Get
		Set
			If (Me._dateStartOtpusk.Equals(value) = false) Then
				Me.OndateStartOtpuskChanging(value)
				Me.SendPropertyChanging
				Me._dateStartOtpusk = value
				Me.SendPropertyChanged("dateStartOtpusk")
				Me.OndateStartOtpuskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateEndOtpusk", DbType:="Date")>  _
	Public Property dateEndOtpusk() As System.Nullable(Of Date)
		Get
			Return Me._dateEndOtpusk
		End Get
		Set
			If (Me._dateEndOtpusk.Equals(value) = false) Then
				Me.OndateEndOtpuskChanging(value)
				Me.SendPropertyChanging
				Me._dateEndOtpusk = value
				Me.SendPropertyChanged("dateEndOtpusk")
				Me.OndateEndOtpuskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDolgnost", DbType:="Int")>  _
	Public Property idDolgnost() As System.Nullable(Of Integer)
		Get
			Return Me._idDolgnost
		End Get
		Set
			If (Me._idDolgnost.Equals(value) = false) Then
				If Me._Dolgnost.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidDolgnostChanging(value)
				Me.SendPropertyChanging
				Me._idDolgnost = value
				Me.SendPropertyChanged("idDolgnost")
				Me.OnidDolgnostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dolgnost_Sotrudniki", Storage:="_Dolgnost", ThisKey:="idDolgnost", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Dolgnost() As Dolgnost
		Get
			Return Me._Dolgnost.Entity
		End Get
		Set
			Dim previousValue As Dolgnost = Me._Dolgnost.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Dolgnost.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Dolgnost.Entity = Nothing
					previousValue.Sotrudnikis.Remove(Me)
				End If
				Me._Dolgnost.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sotrudnikis.Add(Me)
					Me._idDolgnost = value.id
				Else
					Me._idDolgnost = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Dolgnost")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cabinet_Sotrudniki", Storage:="_Cabinet", ThisKey:="IdCabinet", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Cabinet() As Cabinet
		Get
			Return Me._Cabinet.Entity
		End Get
		Set
			Dim previousValue As Cabinet = Me._Cabinet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cabinet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cabinet.Entity = Nothing
					previousValue.Sotrudnikis.Remove(Me)
				End If
				Me._Cabinet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sotrudnikis.Add(Me)
					Me._IdCabinet = value.id
				Else
					Me._IdCabinet = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cabinet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NewsTable")>  _
Partial Public Class NewsTable
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Title As String
	
	Private _Text As String
	
	Private _date As Date
	
	Private _del As Boolean
	
	Private _UserCreate As String
	
	Private _UserEdit As String
	
	Private _DateCreate As System.Nullable(Of Date)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OndelChanging(value As Boolean)
    End Sub
    Partial Private Sub OndelChanged()
    End Sub
    Partial Private Sub OnUserCreateChanging(value As String)
    End Sub
    Partial Private Sub OnUserCreateChanged()
    End Sub
    Partial Private Sub OnUserEditChanging(value As String)
    End Sub
    Partial Private Sub OnUserEditChanged()
    End Sub
    Partial Private Sub OnDateCreateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="NVarChar(2000)")>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_del", DbType:="Bit NOT NULL")>  _
	Public Property del() As Boolean
		Get
			Return Me._del
		End Get
		Set
			If ((Me._del = value)  _
						= false) Then
				Me.OndelChanging(value)
				Me.SendPropertyChanging
				Me._del = value
				Me.SendPropertyChanged("del")
				Me.OndelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserCreate", DbType:="NVarChar(100)")>  _
	Public Property UserCreate() As String
		Get
			Return Me._UserCreate
		End Get
		Set
			If (String.Equals(Me._UserCreate, value) = false) Then
				Me.OnUserCreateChanging(value)
				Me.SendPropertyChanging
				Me._UserCreate = value
				Me.SendPropertyChanged("UserCreate")
				Me.OnUserCreateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserEdit", DbType:="NVarChar(100)")>  _
	Public Property UserEdit() As String
		Get
			Return Me._UserEdit
		End Get
		Set
			If (String.Equals(Me._UserEdit, value) = false) Then
				Me.OnUserEditChanging(value)
				Me.SendPropertyChanging
				Me._UserEdit = value
				Me.SendPropertyChanged("UserEdit")
				Me.OnUserEditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreate", DbType:="DateTime")>  _
	Public Property DateCreate() As System.Nullable(Of Date)
		Get
			Return Me._DateCreate
		End Get
		Set
			If (Me._DateCreate.Equals(value) = false) Then
				Me.OnDateCreateChanging(value)
				Me.SendPropertyChanging
				Me._DateCreate = value
				Me.SendPropertyChanged("DateCreate")
				Me.OnDateCreateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.filials")>  _
Partial Public Class filials
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _address As String
	
	Private _description As String
	
	Private _proezd As String
	
	Private _porjadokSortirovki As System.Nullable(Of Integer)
	
	Private _WorkTime As String
	
	Private _idCabinetRukovoditelya As System.Nullable(Of Integer)
	
	Private _idTelRegistratur As System.Nullable(Of Integer)
	
	Private _idRukovoditel As System.Nullable(Of Integer)
	
	Private _email As String
	
	Private _Cabinets As EntitySet(Of Cabinet)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnproezdChanging(value As String)
    End Sub
    Partial Private Sub OnproezdChanged()
    End Sub
    Partial Private Sub OnporjadokSortirovkiChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnporjadokSortirovkiChanged()
    End Sub
    Partial Private Sub OnWorkTimeChanging(value As String)
    End Sub
    Partial Private Sub OnWorkTimeChanged()
    End Sub
    Partial Private Sub OnidCabinetRukovoditelyaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidCabinetRukovoditelyaChanged()
    End Sub
    Partial Private Sub OnidTelRegistraturChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTelRegistraturChanged()
    End Sub
    Partial Private Sub OnidRukovoditelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidRukovoditelChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cabinets = New EntitySet(Of Cabinet)(AddressOf Me.attach_Cabinets, AddressOf Me.detach_Cabinets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(1000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_proezd", DbType:="NVarChar(1000)")>  _
	Public Property proezd() As String
		Get
			Return Me._proezd
		End Get
		Set
			If (String.Equals(Me._proezd, value) = false) Then
				Me.OnproezdChanging(value)
				Me.SendPropertyChanging
				Me._proezd = value
				Me.SendPropertyChanged("proezd")
				Me.OnproezdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_porjadokSortirovki", DbType:="Int")>  _
	Public Property porjadokSortirovki() As System.Nullable(Of Integer)
		Get
			Return Me._porjadokSortirovki
		End Get
		Set
			If (Me._porjadokSortirovki.Equals(value) = false) Then
				Me.OnporjadokSortirovkiChanging(value)
				Me.SendPropertyChanging
				Me._porjadokSortirovki = value
				Me.SendPropertyChanged("porjadokSortirovki")
				Me.OnporjadokSortirovkiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkTime", DbType:="NVarChar(50)")>  _
	Public Property WorkTime() As String
		Get
			Return Me._WorkTime
		End Get
		Set
			If (String.Equals(Me._WorkTime, value) = false) Then
				Me.OnWorkTimeChanging(value)
				Me.SendPropertyChanging
				Me._WorkTime = value
				Me.SendPropertyChanged("WorkTime")
				Me.OnWorkTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCabinetRukovoditelya", DbType:="Int")>  _
	Public Property idCabinetRukovoditelya() As System.Nullable(Of Integer)
		Get
			Return Me._idCabinetRukovoditelya
		End Get
		Set
			If (Me._idCabinetRukovoditelya.Equals(value) = false) Then
				Me.OnidCabinetRukovoditelyaChanging(value)
				Me.SendPropertyChanging
				Me._idCabinetRukovoditelya = value
				Me.SendPropertyChanged("idCabinetRukovoditelya")
				Me.OnidCabinetRukovoditelyaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTelRegistratur", DbType:="Int")>  _
	Public Property idTelRegistratur() As System.Nullable(Of Integer)
		Get
			Return Me._idTelRegistratur
		End Get
		Set
			If (Me._idTelRegistratur.Equals(value) = false) Then
				Me.OnidTelRegistraturChanging(value)
				Me.SendPropertyChanging
				Me._idTelRegistratur = value
				Me.SendPropertyChanged("idTelRegistratur")
				Me.OnidTelRegistraturChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idRukovoditel", DbType:="Int")>  _
	Public Property idRukovoditel() As System.Nullable(Of Integer)
		Get
			Return Me._idRukovoditel
		End Get
		Set
			If (Me._idRukovoditel.Equals(value) = false) Then
				Me.OnidRukovoditelChanging(value)
				Me.SendPropertyChanging
				Me._idRukovoditel = value
				Me.SendPropertyChanged("idRukovoditel")
				Me.OnidRukovoditelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(255)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="filials_Cabinet", Storage:="_Cabinets", ThisKey:="id", OtherKey:="IDFilial")>  _
	Public Property Cabinets() As EntitySet(Of Cabinet)
		Get
			Return Me._Cabinets
		End Get
		Set
			Me._Cabinets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cabinets(ByVal entity As Cabinet)
		Me.SendPropertyChanging
		entity.filials = Me
	End Sub
	
	Private Sub detach_Cabinets(ByVal entity As Cabinet)
		Me.SendPropertyChanging
		entity.filials = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cabinet")>  _
Partial Public Class Cabinet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _cabinetName As String
	
	Private _cabinetNum As String
	
	Private _IDFilial As Integer
	
	Private _cabinetTel As String
	
	Private _NotShow As System.Nullable(Of Boolean)
	
	Private _Sotrudnikis As EntitySet(Of Sotrudniki)
	
	Private _filials As EntityRef(Of filials)
	
    #Region "Определения метода расширяемости"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncabinetNameChanging(value As String)
    End Sub
    Partial Private Sub OncabinetNameChanged()
    End Sub
    Partial Private Sub OncabinetNumChanging(value As String)
    End Sub
    Partial Private Sub OncabinetNumChanged()
    End Sub
    Partial Private Sub OnIDFilialChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDFilialChanged()
    End Sub
    Partial Private Sub OncabinetTelChanging(value As String)
    End Sub
    Partial Private Sub OncabinetTelChanged()
    End Sub
    Partial Private Sub OnNotShowChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNotShowChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sotrudnikis = New EntitySet(Of Sotrudniki)(AddressOf Me.attach_Sotrudnikis, AddressOf Me.detach_Sotrudnikis)
		Me._filials = CType(Nothing, EntityRef(Of filials))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cabinetName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property cabinetName() As String
		Get
			Return Me._cabinetName
		End Get
		Set
			If (String.Equals(Me._cabinetName, value) = false) Then
				Me.OncabinetNameChanging(value)
				Me.SendPropertyChanging
				Me._cabinetName = value
				Me.SendPropertyChanged("cabinetName")
				Me.OncabinetNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cabinetNum", DbType:="NVarChar(5)")>  _
	Public Property cabinetNum() As String
		Get
			Return Me._cabinetNum
		End Get
		Set
			If (String.Equals(Me._cabinetNum, value) = false) Then
				Me.OncabinetNumChanging(value)
				Me.SendPropertyChanging
				Me._cabinetNum = value
				Me.SendPropertyChanged("cabinetNum")
				Me.OncabinetNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDFilial", DbType:="Int NOT NULL")>  _
	Public Property IDFilial() As Integer
		Get
			Return Me._IDFilial
		End Get
		Set
			If ((Me._IDFilial = value)  _
						= false) Then
				If Me._filials.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDFilialChanging(value)
				Me.SendPropertyChanging
				Me._IDFilial = value
				Me.SendPropertyChanged("IDFilial")
				Me.OnIDFilialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cabinetTel", DbType:="NVarChar(100)")>  _
	Public Property cabinetTel() As String
		Get
			Return Me._cabinetTel
		End Get
		Set
			If (String.Equals(Me._cabinetTel, value) = false) Then
				Me.OncabinetTelChanging(value)
				Me.SendPropertyChanging
				Me._cabinetTel = value
				Me.SendPropertyChanged("cabinetTel")
				Me.OncabinetTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotShow", DbType:="Bit")>  _
	Public Property NotShow() As System.Nullable(Of Boolean)
		Get
			Return Me._NotShow
		End Get
		Set
			If (Me._NotShow.Equals(value) = false) Then
				Me.OnNotShowChanging(value)
				Me.SendPropertyChanging
				Me._NotShow = value
				Me.SendPropertyChanged("NotShow")
				Me.OnNotShowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cabinet_Sotrudniki", Storage:="_Sotrudnikis", ThisKey:="id", OtherKey:="IdCabinet")>  _
	Public Property Sotrudnikis() As EntitySet(Of Sotrudniki)
		Get
			Return Me._Sotrudnikis
		End Get
		Set
			Me._Sotrudnikis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="filials_Cabinet", Storage:="_filials", ThisKey:="IDFilial", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property filials() As filials
		Get
			Return Me._filials.Entity
		End Get
		Set
			Dim previousValue As filials = Me._filials.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._filials.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._filials.Entity = Nothing
					previousValue.Cabinets.Remove(Me)
				End If
				Me._filials.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cabinets.Add(Me)
					Me._IDFilial = value.id
				Else
					Me._IDFilial = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("filials")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sotrudnikis(ByVal entity As Sotrudniki)
		Me.SendPropertyChanging
		entity.Cabinet = Me
	End Sub
	
	Private Sub detach_Sotrudnikis(ByVal entity As Sotrudniki)
		Me.SendPropertyChanging
		entity.Cabinet = Nothing
	End Sub
End Class

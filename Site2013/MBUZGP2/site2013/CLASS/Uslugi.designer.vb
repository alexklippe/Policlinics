'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="tgp2_site")>  _
Partial Public Class UslugiDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPlatnyeUslugiGroup(instance As PlatnyeUslugiGroup)
    End Sub
  Partial Private Sub UpdatePlatnyeUslugiGroup(instance As PlatnyeUslugiGroup)
    End Sub
  Partial Private Sub DeletePlatnyeUslugiGroup(instance As PlatnyeUslugiGroup)
    End Sub
  Partial Private Sub InsertPlatnyeUslugiItem(instance As PlatnyeUslugiItem)
    End Sub
  Partial Private Sub UpdatePlatnyeUslugiItem(instance As PlatnyeUslugiItem)
    End Sub
  Partial Private Sub DeletePlatnyeUslugiItem(instance As PlatnyeUslugiItem)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("tgp2_siteConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property PlatnyeUslugiGroups() As System.Data.Linq.Table(Of PlatnyeUslugiGroup)
		Get
			Return Me.GetTable(Of PlatnyeUslugiGroup)
		End Get
	End Property
	
	Public ReadOnly Property PlatnyeUslugiItems() As System.Data.Linq.Table(Of PlatnyeUslugiItem)
		Get
			Return Me.GetTable(Of PlatnyeUslugiItem)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PlatnyeUslugiGroups")>  _
Partial Public Class PlatnyeUslugiGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _Deleted As Boolean
	
	Private _PlatnyeUslugiItems As EntitySet(Of PlatnyeUslugiItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDeletedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PlatnyeUslugiItems = New EntitySet(Of PlatnyeUslugiItem)(AddressOf Me.attach_PlatnyeUslugiItems, AddressOf Me.detach_PlatnyeUslugiItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(200)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deleted", DbType:="Bit NOT NULL")>  _
	Public Property Deleted() As Boolean
		Get
			Return Me._Deleted
		End Get
		Set
			If ((Me._Deleted = value)  _
						= false) Then
				Me.OnDeletedChanging(value)
				Me.SendPropertyChanging
				Me._Deleted = value
				Me.SendPropertyChanged("Deleted")
				Me.OnDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlatnyeUslugiGroup_PlatnyeUslugiItem", Storage:="_PlatnyeUslugiItems", ThisKey:="id", OtherKey:="idGroup")>  _
	Public Property PlatnyeUslugiItems() As EntitySet(Of PlatnyeUslugiItem)
		Get
			Return Me._PlatnyeUslugiItems
		End Get
		Set
			Me._PlatnyeUslugiItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PlatnyeUslugiItems(ByVal entity As PlatnyeUslugiItem)
		Me.SendPropertyChanging
		entity.PlatnyeUslugiGroup = Me
	End Sub
	
	Private Sub detach_PlatnyeUslugiItems(ByVal entity As PlatnyeUslugiItem)
		Me.SendPropertyChanging
		entity.PlatnyeUslugiGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PlatnyeUslugiItems")>  _
Partial Public Class PlatnyeUslugiItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _Money As System.Nullable(Of Decimal)
	
	Private _idGroup As System.Nullable(Of Integer)
	
	Private _del As Boolean
	
	Private _PriceLgota As System.Nullable(Of Decimal)
	
	Private _Code As String
	
	Private _IntName As String
	
	Private _PlatnyeUslugiGroup As EntityRef(Of PlatnyeUslugiGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMoneyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMoneyChanged()
    End Sub
    Partial Private Sub OnidGroupChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidGroupChanged()
    End Sub
    Partial Private Sub OndelChanging(value As Boolean)
    End Sub
    Partial Private Sub OndelChanged()
    End Sub
    Partial Private Sub OnPriceLgotaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPriceLgotaChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnIntNameChanging(value As String)
    End Sub
    Partial Private Sub OnIntNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PlatnyeUslugiGroup = CType(Nothing, EntityRef(Of PlatnyeUslugiGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Money", DbType:="Money")>  _
	Public Property Money() As System.Nullable(Of Decimal)
		Get
			Return Me._Money
		End Get
		Set
			If (Me._Money.Equals(value) = false) Then
				Me.OnMoneyChanging(value)
				Me.SendPropertyChanging
				Me._Money = value
				Me.SendPropertyChanged("Money")
				Me.OnMoneyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idGroup", DbType:="Int")>  _
	Public Property idGroup() As System.Nullable(Of Integer)
		Get
			Return Me._idGroup
		End Get
		Set
			If (Me._idGroup.Equals(value) = false) Then
				If Me._PlatnyeUslugiGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidGroupChanging(value)
				Me.SendPropertyChanging
				Me._idGroup = value
				Me.SendPropertyChanged("idGroup")
				Me.OnidGroupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_del", DbType:="Bit NOT NULL")>  _
	Public Property del() As Boolean
		Get
			Return Me._del
		End Get
		Set
			If ((Me._del = value)  _
						= false) Then
				Me.OndelChanging(value)
				Me.SendPropertyChanging
				Me._del = value
				Me.SendPropertyChanged("del")
				Me.OndelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceLgota", DbType:="Money")>  _
	Public Property PriceLgota() As System.Nullable(Of Decimal)
		Get
			Return Me._PriceLgota
		End Get
		Set
			If (Me._PriceLgota.Equals(value) = false) Then
				Me.OnPriceLgotaChanging(value)
				Me.SendPropertyChanging
				Me._PriceLgota = value
				Me.SendPropertyChanged("PriceLgota")
				Me.OnPriceLgotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntName", DbType:="NVarChar(255)")>  _
	Public Property IntName() As String
		Get
			Return Me._IntName
		End Get
		Set
			If (String.Equals(Me._IntName, value) = false) Then
				Me.OnIntNameChanging(value)
				Me.SendPropertyChanging
				Me._IntName = value
				Me.SendPropertyChanged("IntName")
				Me.OnIntNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PlatnyeUslugiGroup_PlatnyeUslugiItem", Storage:="_PlatnyeUslugiGroup", ThisKey:="idGroup", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property PlatnyeUslugiGroup() As PlatnyeUslugiGroup
		Get
			Return Me._PlatnyeUslugiGroup.Entity
		End Get
		Set
			Dim previousValue As PlatnyeUslugiGroup = Me._PlatnyeUslugiGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PlatnyeUslugiGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PlatnyeUslugiGroup.Entity = Nothing
					previousValue.PlatnyeUslugiItems.Remove(Me)
				End If
				Me._PlatnyeUslugiGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PlatnyeUslugiItems.Add(Me)
					Me._idGroup = value.id
				Else
					Me._idGroup = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PlatnyeUslugiGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
